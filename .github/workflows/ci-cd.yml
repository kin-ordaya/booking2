name: CI/CD Pipeline - Docker Full Stack

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: booking2-backend

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ravlabos2025/booking2-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy Full Stack
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Crear directorio del proyecto
            sudo mkdir -p /opt/booking2
            sudo chown ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} /opt/booking2
            cd /opt/booking2
            
            # Crear backup antes del despliegue (si ya existe la BD)
            if docker ps | grep -q "booking2-db-prod"; then
              echo "📦 Creando backup antes del despliegue..."
              docker exec booking2-db-prod pg_dump -U postgres booking2 > "backup_before_deploy_$(date +%Y%m%d_%H%M%S).sql" || echo "⚠️ No se pudo crear backup"
            fi
            
            # Descargar archivos de configuración
            curl -o docker-compose.prod.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
            curl -o .env.prod https://raw.githubusercontent.com/${{ github.repository }}/main/.env.example
            
            # Crear directorios necesarios
            mkdir -p backups scripts init
            
            # Descargar scripts
            curl -o scripts/backup-db.sh https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/backup-db.sh
            curl -o scripts/restore-db.sh https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/restore-db.sh
            chmod +x scripts/*.sh
            
            # Configurar variables de entorno
            cat > .env.prod << EOF
            # Base de datos (se mantiene local en Docker)
            DB_PASS=booking123456
            
            # JWT y autenticación  
            JWT_SECRET=jwt-secret-por-defecto-desarrollo-1234567890
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            
            # Email
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}
            EOF
            
            # Configuración de la aplicación
            EXTERNAL_PORT=3001
            NODE_ENV=production
            
            # Base de datos (se mantiene local en Docker)
            DB_NAME=booking2
            DB_USER=postgres
            DB_PASS=${{ secrets.DB_PASS || 'booking123456' }}
            DB_EXTERNAL_PORT=5432
            
            # JWT y autenticación
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            
            # Email
            EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            EMAIL_PORT=${{ secrets.EMAIL_PORT }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}
            EOF
            
            # Pull de la nueva imagen
            docker pull ravlabos2025/booking2-backend:latest
            
            # Desplegar con docker-compose
            docker-compose -f docker-compose.prod.yml --env-file .env.prod down
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
            
            # Esperar a que los servicios estén listos
            echo "⏳ Esperando a que los servicios estén listos..."
            sleep 30
            
            # Verificar que la aplicación responda
            max_attempts=30
            attempt=1
            while [ $attempt -le $max_attempts ]; do
              if curl -f -s "http://localhost:3001/health" > /dev/null 2>&1; then
                echo "✅ Aplicación está funcionando correctamente"
                break
              fi
              echo "Intento $attempt/$max_attempts - Esperando..."
              sleep 10
              attempt=$((attempt + 1))
            done
            
            if [ $attempt -gt $max_attempts ]; then
              echo "❌ La aplicación no responde después de $max_attempts intentos"
              docker-compose -f docker-compose.prod.yml logs
              exit 1
            fi
            
            # Limpiar imágenes no utilizadas
            docker image prune -f
            
            # Crear backup post-despliegue
            sleep 10
            ./scripts/backup-db.sh auto
            
            echo "🎉 Despliegue completado exitosamente!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "🔗 Application: http://${{ secrets.SERVER_HOST }}:3001"
            echo "🔗 Health Check: http://${{ secrets.SERVER_HOST }}:3001/health"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi